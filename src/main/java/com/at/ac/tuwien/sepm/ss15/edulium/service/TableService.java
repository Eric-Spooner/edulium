package com.at.ac.tuwien.sepm.ss15.edulium.service;

import com.at.ac.tuwien.sepm.ss15.edulium.dao.DAOException;
import com.at.ac.tuwien.sepm.ss15.edulium.domain.Table;
import com.at.ac.tuwien.sepm.ss15.edulium.domain.history.History;
import com.at.ac.tuwien.sepm.ss15.edulium.domain.validation.ValidationException;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * Table Service interface
 */
@Component
@PreAuthorize("isAuthenticated()")
@Transactional(propagation = Propagation.REQUIRED)
public interface TableService {
    /**
     * writes the table to the underlying datasource;
     *
     * sets the identity parameter of table if the data was stored
     * successfully and a new identity has been generated by the
     * underlying datasource
     * @param table object to store
     * @throws DAOException if the object couldn't be stored
     */
    void addTable(Table table) throws ServiceException;

    /**
     * updates data of the table in the underlying datasource
     * @param table object to update
     * @throws DAOException if the table couldn't be updated
     */
    void updateTable(Table table) throws ServiceException;

    /**
     * removes the table from the underlying datasource
     * @param table object to remove
     * @throws DAOException if the object couldn't be removed
     */
    void deleteTable(Table table) throws ServiceException;

    /**
     * returns all tables which parameters match the
     * parameters of the parameter object
     *
     * all parameters with value NULL will not be used for matching
     * @param table object used for matching
     * @return a list of matched table
     * @throws DAOException if the data couldn't be retrieved
     */
    List<Table> findTables(Table table) throws ServiceException;

    /**
     * @return returns all stored tables
     * @throws DAOException if the data couldn't be retrieved
     */
    List<Table> getAllTables() throws ServiceException;
}
